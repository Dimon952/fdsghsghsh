import requests
import schedule
import time
import sys
import os
import json
from datetime import datetime

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
CONFIG_FILE = 'config.json'

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ config.json."""
    if not os.path.exists(CONFIG_FILE):
        return None, None # –§–∞–π–ª–∞ –Ω–µ—Ç
    
    try:
        with open(CONFIG_FILE, 'r') as f:
            config = json.load(f)
            token = config.get('TELEGRAM_BOT_TOKEN')
            chat_id = config.get('TELEGRAM_CHAT_ID')
            if not token or not chat_id:
                return None, None # –î–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ –Ω–µ–ø–æ–ª–Ω—ã–µ
            return token, chat_id
    except (json.JSONDecodeError, TypeError):
        return None, None # –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç

def save_config(token, chat_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª config.json."""
    config = {
        'TELEGRAM_BOT_TOKEN': token,
        'TELEGRAM_CHAT_ID': chat_id
    }
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=4)
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª '{CONFIG_FILE}'.")

def initial_setup():
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("--- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ---")
    token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞: ").strip()
    chat_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Chat ID –≤ Telegram: ").strip()
    
    if not token or not chat_id:
        print("‚ùå –¢–æ–∫–µ–Ω –∏ Chat ID –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        sys.exit(1)
        
    save_config(token, chat_id)
    return token, chat_id

def get_dollar_to_ruble_rate():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é –æ—Ç –¶–ë –†–§."""
    try:
        response = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
        response.raise_for_status()
        data = response.json()
        usd_rate = data['Valute']['USD']['Value']
        return f"{usd_rate:.2f}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞: {e}")
        return "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"

def get_crypto_prices():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –ë–∏—Ç–∫–æ–∏–Ω–∞ –∏ –≠—Ñ–∏—Ä–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö."""
    try:
        response = requests.get('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd')
        response.raise_for_status()
        data = response.json()
        btc_price = data['bitcoin']['usd']
        eth_price = data['ethereum']['usd']
        return f"{btc_price:,.2f}", f"{eth_price:,.2f}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å", "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"

def send_telegram_message(message, token, chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç Telegram."""
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'Markdown'
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def send_currency_report(token, chat_id):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: —Å–æ–±–∏—Ä–∞–µ—Ç –∫—É—Ä—Å—ã –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞."""
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: —Å–±–æ—Ä –∫—É—Ä—Å–æ–≤...")
    
    dollar_rate = get_dollar_to_ruble_rate()
    btc_price_usd, eth_price_usd = get_crypto_prices()
    
    message_text = (
        f"‚òÄÔ∏è *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∫—É—Ä—Å–æ–≤*\n\n"
        f"üá∑üá∫ **–î–æ–ª–ª–∞—Ä –∫ —Ä—É–±–ª—é (USD/RUB):** {dollar_rate} ‚ÇΩ\n\n"
        f"üìà *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:*\n"
        f"üí∞ **Bitcoin (BTC/USD):** ${btc_price_usd}\n"
        f"üíé **Ethereum (ETH/USD):** ${eth_price_usd}"
    )
    
    send_telegram_message(message_text, token, chat_id)

if __name__ == "__main__":
    # 1. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    bot_token, chat_id = load_config()
    
    # 2. –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—Ç, –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    if not bot_token or not chat_id:
        print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        bot_token, chat_id = initial_setup()
    else:
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ '{CONFIG_FILE}'.")
        
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (09:00)...")
    
    # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule.every().day.at("09:00").do(send_currency_report, token=bot_token, chat_id=chat_id)

    # 4. –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
    try:
        while True:
            schedule.run_pending()
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
        sys.exit(0)
